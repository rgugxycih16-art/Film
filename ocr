<!DOCTYPE html>
<html lang="zh-CN">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no" />
  <title>二维码文字互转工具</title>

  <!-- 二维码生成库：换成浏览器兼容更好的 qrcodejs -->
  <script src="https://unpkg.com/qrcodejs@1.0.0/qrcode.min.js"></script>
  <!-- 二维码识别库 -->
  <script src="https://cdn.jsdelivr.net/npm/jsqr@1.4.0/dist/jsQR.min.js"></script>

  <style>
    :root {
      --bg-gradient: radial-gradient(circle at top left,#e9fbe9 0%,#bff0c9 30%,#7ddf9c 60%,#37b86a 100%);
      --bg-overlay: linear-gradient(160deg,rgba(33,150,83,.22),rgba(33,150,83,0));
      --accent-primary: #1b8b4b;
      --accent-primary-dark: #126135;
      --accent-secondary: #e8f7ed;
      --accent-secondary-strong: #d2f0dc;
      --accent-gradient: linear-gradient(135deg,#65d986,#1b8b4b);
      --accent-shadow: rgba(27,139,75,.35);
      --text-heading: #0f5132;
      --text-body: #2f5f46;
      --card-bg: rgba(255,255,255,.9);
    }
    * { margin:0; padding:0; box-sizing:border-box; }
    body {
      font-family:-apple-system,BlinkMacSystemFont,"Segoe UI",Roboto,"Helvetica Neue",Arial,sans-serif;
      min-height:100vh;
      padding:20px;
      background:var(--bg-gradient);
      background-attachment:fixed;
      color:var(--text-body);
      position:relative;
      overflow-x:hidden;
    }
    body::before {
      content:"";
      position:fixed;
      inset:0;
      background:var(--bg-overlay);
      pointer-events:none;
    }
    .container { max-width:640px; margin:0 auto; background:var(--card-bg); border-radius:24px; padding:36px 32px; box-shadow:0 24px 70px rgba(15,81,50,.18); backdrop-filter:blur(6px); }
    h1 { text-align:center; color:var(--text-heading); margin-bottom:12px; font-size:30px; letter-spacing:.5px; }
    .subtitle { text-align:center; color:var(--text-body); margin-bottom:32px; font-size:15px; opacity:.85; }
    .tabs { display:flex; gap:12px; margin-bottom:32px; background:var(--accent-secondary); padding:6px; border-radius:18px; box-shadow:inset 0 1px 3px rgba(27,139,75,.18); }
    .tab { flex:1; padding:14px; border:none; background:transparent; border-radius:12px; font-size:16px; font-weight:600; cursor:pointer; transition:.3s; color:var(--accent-primary); }
    .tab:hover { background:var(--accent-secondary-strong); }
    .tab.active { background:var(--accent-gradient); color:#fff; box-shadow:0 6px 18px var(--accent-shadow); }
    .tab-content { display:none; }
    .tab-content.active { display:block; }
    .input-group { margin-bottom:20px; }
    .input-group label { display:block; margin-bottom:8px; color:var(--text-heading); font-weight:600; }
    textarea {
      width:100%; min-height:120px; padding:16px; border:2px solid rgba(27,139,75,.15); border-radius:12px;
      font-size:15px; font-family:inherit; resize:vertical; transition:border-color .3s, box-shadow .3s;
      background:rgba(255,255,255,.92);
      color:var(--text-body);
    }
    textarea:focus { outline:none; border-color:var(--accent-primary); box-shadow:0 0 0 4px rgba(27,139,75,.15); }
    .size-selector { display:flex; gap:10px; margin-bottom:20px; }
    .size-selector label { flex:1; }
    .size-selector select {
      width:100%; padding:12px; border:2px solid rgba(27,139,75,.15); border-radius:12px; font-size:16px;
      transition:border-color .3s, box-shadow .3s;
      background:rgba(255,255,255,.92);
      color:var(--text-body);
    }
    .size-selector select:focus { outline:none; border-color:var(--accent-primary); box-shadow:0 0 0 4px rgba(27,139,75,.15); }
    button {
      width:100%; padding:15px; border:none; border-radius:12px; font-size:16px; font-weight:600; cursor:pointer; transition:transform .2s, box-shadow .2s, filter .2s;
    }
    .btn-primary { background:var(--accent-gradient); color:#fff; margin-bottom:20px; box-shadow:0 10px 24px rgba(27,139,75,.28); }
    .btn-primary:hover { filter:brightness(1.05); box-shadow:0 14px 28px rgba(18,97,53,.35); }
    .btn-primary:active { transform:scale(.97); }
    .btn-secondary { background:var(--accent-secondary); color:var(--accent-primary); margin-bottom:10px; box-shadow:inset 0 0 0 1px rgba(27,139,75,.2); }
    .btn-secondary:hover { background:var(--accent-secondary-strong); }
    .qr-result { text-align:center; margin-top:20px; display:none; }
    #qrBox { width:100%; display:grid; place-items:center; margin-top:10px; }
    #qrBox canvas, #qrBox img {
      max-width:100%; border-radius:14px; box-shadow:0 12px 28px rgba(15,81,50,.18); margin-bottom:18px;
      background:#fff;
    }
    .upload-area {
      border:3px dashed rgba(27,139,75,.45); border-radius:18px; padding:42px 22px; text-align:center; cursor:pointer;
      transition:.3s; background:rgba(232,247,237,.85); margin-bottom:24px; position:relative; overflow:hidden;
    }
    .upload-area::before {
      content:"";
      position:absolute;
      inset:-60% -40%;
      background:radial-gradient(circle,rgba(101,217,134,.45) 0%,rgba(101,217,134,0) 70%);
      opacity:0;
      transition:.3s;
    }
    .upload-area:hover { border-color:var(--accent-primary); background:rgba(225,244,231,.92); }
    .upload-area:hover::before { opacity:1; }
    .upload-area.dragover { border-color:var(--accent-primary-dark); background:rgba(208,238,217,.95); transform:scale(1.02); }
    .upload-icon { font-size:48px; margin-bottom:12px; }
    .upload-text { color:var(--accent-primary); font-size:17px; font-weight:600; }
    .upload-hint { color:rgba(47,95,70,.7); font-size:12px; margin-top:6px; }
    #fileInput { display:none; }
    .scan-buttons { display:flex; gap:10px; margin-bottom:20px; }
    .scan-buttons button { flex:1; }
    #preview { max-width:100%; border-radius:14px; margin-bottom:24px; display:none; box-shadow:0 12px 26px rgba(15,81,50,.18); }
    .decode-result { display:none; margin-top:20px; }
    .result-label { font-weight:600; color:var(--text-heading); margin-bottom:10px; }
    #decodeText {
      width:100%; min-height:120px; padding:16px; border:2px solid rgba(27,139,75,.15); border-radius:12px;
      font-size:15px; line-height:1.6; resize:vertical; font-family:inherit; margin-bottom:12px;
      background:rgba(255,255,255,.92); color:var(--text-body);
      transition:border-color .3s, box-shadow .3s;
    }
    #decodeText:focus { outline:none; border-color:var(--accent-primary); box-shadow:0 0 0 4px rgba(27,139,75,.15); }
    .action-buttons { display:flex; gap:10px; }
    .action-buttons button { flex:1; }
    #videoContainer { display:none; position:relative; margin-bottom:20px; }
    #video { width:100%; border-radius:14px; background:#000; box-shadow:0 16px 34px rgba(15,81,50,.25); }
    #scanOverlay {
      position:absolute; top:50%; left:50%; transform:translate(-50%,-50%);
      width:210px; height:210px; border:3px solid rgba(27,139,75,.7); border-radius:14px; box-shadow:0 0 0 9999px rgba(0,0,0,.45);
    }
    .footer { text-align:center; margin-top:28px; color:rgba(47,95,70,.75); font-size:12px; letter-spacing:.2px; }
    @media (max-width:480px) {
      .container{padding:24px 20px; border-radius:20px;}
      h1{font-size:26px;}
      .tabs{gap:8px;}
      .tab{padding:12px;}
      .upload-area{padding:32px 16px;}
    }
  </style>
</head>
<body>
  <div class="container">
    <h1>🔲 二维码工具</h1>
    <p class="subtitle">文字与二维码互相转换</p>

    <div class="tabs">
      <!-- 传入 event，避免 Safari 无全局 event 报错 -->
      <button class="tab active" onclick="switchTab(event, 'generate')">📝 生成二维码</button>
      <button class="tab" onclick="switchTab(event, 'scan')">📷 扫描二维码</button>
    </div>

    <!-- 文字 -> 二维码 -->
    <div id="generate" class="tab-content active">
      <div class="input-group">
        <label for="inputText">输入文字内容:</label>
        <textarea id="inputText" placeholder="输入要生成二维码的文字、网址或其他内容..."></textarea>
      </div>

      <div class="size-selector">
        <label>
          大小:
          <select id="qrSize">
            <option value="200">小 (200x200)</option>
            <option value="300" selected>中 (300x300)</option>
            <option value="400">大 (400x400)</option>
            <option value="500">超大 (500x500)</option>
          </select>
        </label>
        <label>
          纠错级别:
          <select id="errorLevel">
            <option value="L">低 (L)</option>
            <option value="M" selected>中 (M)</option>
            <option value="Q">较高 (Q)</option>
            <option value="H">高 (H)</option>
          </select>
        </label>
      </div>

      <button class="btn-primary" onclick="generateQR()">🔲 生成二维码</button>

      <div class="qr-result" id="qrResult">
        <!-- 用 qrcodejs：需要一个容器，而不是固定的 <canvas> -->
        <div id="qrBox" aria-label="QR Code"></div>
        <button class="btn-secondary" onclick="downloadQR()">💾 下载二维码</button>
        <button class="btn-secondary" onclick="shareQR()">📤 分享二维码</button>
      </div>
    </div>

    <!-- 二维码 -> 文字 -->
    <div id="scan" class="tab-content">
      <div class="upload-area" id="uploadArea">
        <div class="upload-icon">📸</div>
        <div class="upload-text">点击选择二维码图片或拖放到此处</div>
        <div class="upload-hint">支持 JPG、PNG 等格式</div>
      </div>
      <input type="file" id="fileInput" accept="image/*" />

      <div class="scan-buttons">
        <button class="btn-primary" onclick="openCamera()">📷 拍照扫描</button>
        <button class="btn-secondary" onclick="openGallery()">🖼️ 相册选择</button>
      </div>

      <button class="btn-primary" id="liveButton" onclick="startLiveScan()">📹 实时扫描</button>

      <div id="videoContainer">
        <video id="video" autoplay playsinline></video>
        <div id="scanOverlay"></div>
        <button class="btn-secondary" onclick="stopLiveScan()">⏹️ 停止扫描</button>
      </div>

      <img id="preview" alt="预览图片" />

      <div class="decode-result" id="decodeResult">
        <div class="result-label">识别结果:</div>
        <textarea id="decodeText" readonly></textarea>
        <div class="action-buttons">
          <button class="btn-primary" onclick="copyResult()">📋 复制</button>
          <button class="btn-secondary" onclick="openLink()">🔗 打开链接</button>
          <button class="btn-secondary" onclick="resetScan()">🔄 重新扫描</button>
        </div>
      </div>
    </div>

    <div class="footer">所有处理在本地完成，保护您的隐私</div>
  </div>

  <script>
    let videoStream = null;
    let scanning = false;
    let qr; // qrcodejs 实例

    // Tab 切换（显式接收 event）
    function switchTab(ev, tabName) {
      document.querySelectorAll('.tab').forEach(tab => tab.classList.remove('active'));
      document.querySelectorAll('.tab-content').forEach(content => content.classList.remove('active'));
      if (ev && ev.currentTarget) ev.currentTarget.classList.add('active');
      document.getElementById(tabName).classList.add('active');
      if (tabName === 'generate') stopLiveScan();
    }

    // ========= 文字 -> 二维码 =========
    function generateQR() {
      const value = (document.getElementById('inputText').value || '').trim();
      const size = parseInt(document.getElementById('qrSize').value, 10);
      const level = document.getElementById('errorLevel').value;

      if (!value) { alert('请输入要生成二维码的内容！'); return; }

      const box = document.getElementById('qrBox');
      box.innerHTML = ''; // 清空旧的
      // qrcodejs：H(最高)、Q、M、L(最低)
      const levelMap = { L:QRCode.CorrectLevel.L, M:QRCode.CorrectLevel.M, Q:QRCode.CorrectLevel.Q, H:QRCode.CorrectLevel.H };

      // 创建新二维码
      qr = new QRCode(box, {
        text: value,
        width: size,
        height: size,
        colorDark: "#000000",
        colorLight: "#ffffff",
        correctLevel: levelMap[level] ?? QRCode.CorrectLevel.M
      });

      // 显示操作区
      document.getElementById('qrResult').style.display = 'block';
    }

    function getQRDataURL() {
      const box = document.getElementById('qrBox');
      const canvas = box.querySelector('canvas');
      const img = box.querySelector('img');
      if (canvas) return canvas.toDataURL('image/png');
      if (img && img.src) return img.src;
      return null;
    }

    function downloadQR() {
      const url = getQRDataURL();
      if (!url) return alert('暂无二维码，请先生成');
      const a = document.createElement('a');
      a.href = url; a.download = 'qrcode_' + Date.now() + '.png';
      document.body.appendChild(a); a.click(); a.remove();
    }

    async function shareQR() {
      const url = getQRDataURL();
      if (!url) return alert('暂无二维码，请先生成');
      const res = await fetch(url);
      const blob = await res.blob();
      const file = new File([blob], 'qrcode.png', { type: 'image/png' });
      if (navigator.share && navigator.canShare?.({ files:[file] })) {
        try { await navigator.share({ files:[file], title:'二维码', text:'分享二维码' }); }
        catch(e) { /* 用户取消 */ }
      } else {
        alert('此设备/浏览器不支持系统分享，请使用下载。');
      }
    }

    // ========= 二维码图片 -> 文字 =========
    const uploadArea = document.getElementById('uploadArea');
    const fileInput = document.getElementById('fileInput');
    const preview = document.getElementById('preview');
    const decodeResult = document.getElementById('decodeResult');
    const decodeText = document.getElementById('decodeText');

    uploadArea.addEventListener('click', () => fileInput.click());
    fileInput.addEventListener('change', (e) => {
      const file = e.target.files?.[0];
      if (file) handleImageFile(file);
    });
    uploadArea.addEventListener('dragover', (e) => { e.preventDefault(); uploadArea.classList.add('dragover'); });
    uploadArea.addEventListener('dragleave', () => uploadArea.classList.remove('dragover'));
    uploadArea.addEventListener('drop', (e) => {
      e.preventDefault(); uploadArea.classList.remove('dragover');
      const file = e.dataTransfer.files?.[0];
      if (file && file.type.startsWith('image/')) handleImageFile(file);
    });

    function openCamera() {
      fileInput.setAttribute('capture', 'environment'); // 优先相机
      fileInput.click();
    }
    function openGallery() {
      fileInput.removeAttribute('capture'); // 相册/拍照二选
      fileInput.click();
    }

    function handleImageFile(file) {
      const reader = new FileReader();
      reader.onload = (e) => {
        preview.src = e.target.result; preview.style.display = 'block';
        decodeQRCode(e.target.result);
      };
      reader.readAsDataURL(file);
    }

    function decodeQRCode(imageSrc) {
      const img = new Image();
      img.onload = () => {
        // 为提速与内存安全，限制最长边 1600
        const maxSide = 1600;
        const scale = Math.min(1, maxSide / Math.max(img.width, img.height));
        const w = Math.round(img.width * scale);
        const h = Math.round(img.height * scale);

        const canvas = document.createElement('canvas');
        const ctx = canvas.getContext('2d', { willReadFrequently:true });
        canvas.width = w; canvas.height = h;
        ctx.drawImage(img, 0, 0, w, h);

        const imageData = ctx.getImageData(0, 0, w, h);
        const code = jsQR(imageData.data, imageData.width, imageData.height, { inversionAttempts:'attemptBoth' });

        if (code && code.data) {
          decodeText.value = code.data;
          decodeResult.style.display = 'block';
        } else {
          alert('未识别到二维码，请确保图片清晰且包含二维码');
        }
      };
      img.src = imageSrc;
    }

    // ========= 实时扫描 =========
    const liveCanvas = document.createElement('canvas');
    const liveCtx = liveCanvas.getContext('2d', { willReadFrequently:true });

    function startLiveScan() {
      const videoContainer = document.getElementById('videoContainer');
      const video = document.getElementById('video');
      const liveButton = document.getElementById('liveButton');

      videoContainer.style.display = 'block';
      liveButton.style.display = 'none';
      decodeResult.style.display = 'none';
      preview.style.display = 'none';

      navigator.mediaDevices.getUserMedia({ video:{ facingMode:'environment' } })
        .then(stream => {
          videoStream = stream;
          video.srcObject = stream;
          scanning = true;
          requestAnimationFrame(scanFrame);
        })
        .catch(err => {
          alert('无法访问摄像头: ' + (err.message || err));
          stopLiveScan();
        });
    }

    function scanFrame() {
      if (!scanning) return;
      const video = document.getElementById('video');
      if (video.readyState < 2) { requestAnimationFrame(scanFrame); return; }

      liveCanvas.width = video.videoWidth || 640;
      liveCanvas.height = video.videoHeight || 480;
      liveCtx.drawImage(video, 0, 0, liveCanvas.width, liveCanvas.height);

      const imageData = liveCtx.getImageData(0, 0, liveCanvas.width, liveCanvas.height);
      const code = jsQR(imageData.data, imageData.width, imageData.height, { inversionAttempts:'attemptBoth' });

      if (code && code.data) {
        decodeText.value = code.data;
        decodeResult.style.display = 'block';
        stopLiveScan();
        if (navigator.vibrate) navigator.vibrate(200);
      } else {
        requestAnimationFrame(scanFrame);
      }
    }

    function stopLiveScan() {
      scanning = false;
      if (videoStream) {
        videoStream.getTracks().forEach(t => t.stop());
        videoStream = null;
      }
      document.getElementById('videoContainer').style.display = 'none';
      document.getElementById('liveButton').style.display = 'block';
    }

    // ========= 结果操作 =========
    function copyResult() {
      const txt = decodeText.value || '';
      if (navigator.clipboard?.writeText) {
        navigator.clipboard.writeText(txt).then(() => alert('已复制到剪贴板！'));
      } else {
        decodeText.select(); document.execCommand('copy'); alert('已复制到剪贴板！');
      }
    }

    function openLink() {
      const t = (decodeText.value || '').trim();
      if (/^https?:\/\/[\w\-\.]/i.test(t)) window.open(t, '_blank');
      else alert('识别内容不是网址');
    }

    function resetScan() {
      preview.style.display = 'none';
      decodeResult.style.display = 'none';
      decodeText.value = '';
      fileInput.value = '';
    }

    // 离开页面时停止摄像头
    window.addEventListener('beforeunload', stopLiveScan);
  </script>
</body>
</html>
